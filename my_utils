# -*- coding: utf-8 -*-
import threading
import os
import sys

import logging
from logging import handlers

from functools import wraps
from threading import Event


class Log:
    def __init__(self, log_main_path="/opt/Adward/", log_dir_name="", backup_count=7):
        self.main = log_main_path
        self.name = log_dir_name
        self.count = backup_count
        if not self.name:
            self.name = os.path.basename(sys._getframe().f_back.f_code.co_filename).split(".")[0]
        self.logger = self.set_logger()

    def set_logger(self):
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)  # 设置最低级别的 DeBUG'
        dir_path = os.sep.join([self.main, self.name])
        file_path = os.sep.join([dir_path, "debug.log"])
        if not os.path.exists(dir_path):
            os.makedirs(dir_path)
        debug_handler = logging.handlers.TimedRotatingFileHandler(file_path, when="midnight", backupCount=self.count)
        debug_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))  # 设置格式
        logger.addHandler(debug_handler)  # 添加处理器    rf_handler
        file_path = os.sep.join([dir_path, "error.log"])
        error_handler = logging.handlers.TimedRotatingFileHandler(file_path, when="midnight", backupCount=self.count)
        error_handler.setLevel(logging.ERROR)  # 设置日志等级
        error_handler.setFormatter(
            logging.Formatter("%(asctime)s - %(levelname)s - %(filename)s[:%(lineno)d] - %(message)s"))  # 设置信息格式
        logger.addHandler(error_handler)  # 添加处理器    f_handler
        return logger


def retry(logger=None, max_retry=3, interval_wait=0, is_break=False):
    def do_retry(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                if max_retry == 0:
                    if logger:
                        logger.error("function:{0} failed after {1} times retry,"
                                     "args:{2}, kwargs{3}, error message:{4}"
                                     .format(func.__name__, max_retry, args, kwargs, e))
                    if is_break:
                        raise RuntimeError("function:{0} failed after {1} times retry, "
                                           "args:{2}, kwargs{3}, error message:{4}"
                                           .format(func.__name__, max_retry, args, kwargs, e))
                    else:
                        return
                if max_retry >= 1:
                    count = max_retry
                    while 1:
                        Event().wait(interval_wait)
                        try:
                            count = count - 1
                            logger.debug("function:{0}, retry @ {1} times, with args:{2}, kwargs{3}"
                                         .format(func.__name__, max_retry - count, args, kwargs))
                            return func(*args, **kwargs)
                        except Exception as e:
                            if count == 0:
                                if logger:
                                    logger.error("function:{0} failed after {1} times retry, "
                                                 "args:{2}, kwargs{3}, error message:{4}"
                                                 .format(func.__name__, max_retry, args, kwargs, e))
                                if is_break:
                                    raise RuntimeError("function:{0} failed after {1} times retry, "
                                                       "args:{2}, kwargs{3}, error message:{4}"
                                                       .format(func.__name__, max_retry, args, kwargs, e))
                                else:
                                    return
                            continue
        return wrapper
    return do_retry


class MultiThread(threading.Thread):
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.__queue = queue

    def run(self):
        while True:
            func, kwargs = self.__queue.get()
            func(kwargs)
            self.__queue.task_done()


def start_multi_thread(queue):
    """
    :param queue: a queue to content each thread
    you can use list this:
    ##############################################
    import time


    def test(id):
        print("start %s" % id)
        time.sleep(3)
        print("end %s" % id)


    queue = Queue(5)
    start_multi_thread(queue)
    for i in range(20):
        dic = {"id": i}
        queue.put((test, dic))
    queue.join()  # This line is important, with this line, The main process will exit after all threads have completed
    #############################################
    """
    for i in range(queue.maxsize):
        t = MultiThread(queue)
        t.setDaemon(True)
        t.start()
